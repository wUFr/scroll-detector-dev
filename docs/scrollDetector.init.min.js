/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/scrollDetector.init.ts":
/*!***********************************!*\
  !*** ./ts/scrollDetector.init.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


/*

    BUTTON - CLICKED
    author: Jiří Bělský (wUFr)

    Tiny library that updates button status after its clicked.
    Can be used to prevent double-submit on forms and show user a form is being sent, if request is slow

*/

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var scrollDetector_1 = __importDefault(__webpack_require__(/*! ./scrollDetector */ "./ts/scrollDetector.ts"));

var sc = new scrollDetector_1["default"]();
sc.init();

/***/ }),

/***/ "./ts/scrollDetector.ts":
/*!******************************!*\
  !*** ./ts/scrollDetector.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


/*

    SCROLL DETECTOR
    author: Jiří Bělský (wUFr)

*/

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var scrollDetector = /*#__PURE__*/function () {
  function scrollDetector() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      wrapperClass: "-js-scrollDetector-wrapper",
      scrollClass: "-js-scrollDetector-scroll",
      contentClass: "-js-scrollDetector-content",
      debug: false
    };

    _classCallCheck(this, scrollDetector);

    this.debug = options.debug;
    this.wrapperClass = options.wrapperClass;
    this.wrapperElement = document.getElementsByClassName(this.wrapperClass);
    this.scrollClass = options.scrollClass; //this.scrollElement = document.getElementsByClassName(this.scrollClass);

    this.contentClass = options.contentClass; //this.contentElement = document.getElementsByClassName(this.contentClass);
  }

  _createClass(scrollDetector, [{
    key: "init",
    value: function init() {
      var _this = this;

      // CHECK IF THERE ARE ANY ELEMENTS
      if (!this.wrapperElement.length) {
        if (this.debug) {
          console.log("%cscrollDetector - init(): No wrapper elements found, try checking your classnames", "color: red", this.wrapperClass);
        }

        return;
      }

      if (this.debug) {
        console.log("scrollDetector - init(): Found elements", this.wrapperElement);
      }

      var _iterator = _createForOfIteratorHelper(this.wrapperElement),
          _step;

      try {
        var _loop = function _loop() {
          var wrapper = _step.value;

          // PREVENT DOUBLE-INIT WHICH WOULD RESULT IN CALLING THIS CODE TWICE OR MORE
          if (wrapper.classList.contains("-js-scrollDetector-init")) {
            return "continue";
          }

          wrapper.classList.add("-js-scrollDetector-init");
          var scroller = wrapper.getElementsByClassName(_this.scrollClass)[0];

          if (!scroller) {
            if (_this.debug) {
              console.log("%cscrollDetector - init(): This wrapper does not have scroll element inside.", "color: red", wrapper);
            }

            return "continue";
          }

          var type = wrapper.getAttribute("data-scrollType");

          if (type == "horizontal") {
            // RUN ONCE ON DOMREADY
            document.addEventListener("DOMContentLoaded", function () {
              _this.detectXScrollPosition(scroller);
            }); // KEEP CHECKING WHEN SCROLLING THROUGH

            scroller.addEventListener("scroll", function () {
              _this.detectXScrollPosition(scroller);
            });
          }

          if (type == "vertical") {
            // RUN ONCE ON DOMREADY
            document.addEventListener("DOMContentLoaded", function () {
              _this.detectYScrollPosition(scroller);
            }); // KEEP CHECKING WHEN SCROLLING THROUGH

            scroller.addEventListener("scroll", function () {
              _this.detectYScrollPosition(scroller);
            });
          }
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "detectXScrollPosition",
    value: function detectXScrollPosition(scroller) {
      var offset = 5;
      var widthContainer = scroller.offsetWidth;
      var widthContent = scroller.getElementsByClassName(this.contentClass)[0].offsetWidth;
      var areaWrapper = scroller.closest("." + this.wrapperClass);
      var toStart = scroller.scrollLeft;
      var toEnd = (widthContainer - Math.ceil(widthContent) + Math.ceil(toStart)) * -1;

      if (toStart > 0 + offset) {
        areaWrapper.classList.add("-js-start-shadow");
      } else {
        areaWrapper.classList.remove("-js-start-shadow");
      }

      if (toEnd > 0 + offset) {
        areaWrapper.classList.add("-js-end-shadow");
      } else {
        areaWrapper.classList.remove("-js-end-shadow");
      }
    }
  }, {
    key: "detectYScrollPosition",
    value: function detectYScrollPosition(scroller) {
      var offset = 5;
      var heightContainer = scroller.offsetHeight;
      var heightContent = scroller.getElementsByClassName(this.contentClass)[0].offsetHeight;
      var areaWrapper = scroller.closest("." + this.wrapperClass);
      var toStart = scroller.scrollTop;
      var toEnd = (heightContainer - Math.ceil(heightContent) + Math.ceil(toStart)) * -1;

      if (toStart > 0 + offset) {
        areaWrapper.classList.add("-js-start-shadow");
      } else {
        areaWrapper.classList.remove("-js-start-shadow");
      }

      if (toEnd > 0 + offset) {
        areaWrapper.classList.add("-js-end-shadow");
      } else {
        areaWrapper.classList.remove("-js-end-shadow");
      }
    }
  }]);

  return scrollDetector;
}();

exports.default = scrollDetector;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/scrollDetector.init.ts");
/******/ 	
/******/ })()
;